generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model User {
  id           Int             @id @default(autoincrement())
  username     String          @unique
  password     String
  email        String
  sessions     Session[]
  friends1     Friend[]        @relation("friend1")
  friends2     Friend[]        @relation("friend2")
  requestsFrom FriendRequest[] @relation("requestFrom")
  requestsTo   FriendRequest[] @relation("requestTo")
  fyzio        UserFyzio       @relation("fyzio", fields: [fyzioId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  fyzioId      Int             @unique
  goals        UserGoals       @relation("goals", fields: [goalsId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  goalsId      Int             @unique
  social       UserSocial      @relation("social", fields: [socialId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  socialId     Int             @unique
  posts        Post[]          @relation("post")
  Food         Food[]
  foodDiaries  FoodDiary[] @relation("foodDiary")
}

model Food {
  id          Int     @id @default(autoincrement())
  user        User?   @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  userId      Int?   
  name        String
  kCal        Int
  fat         Int
  carbs       Int
  protein     Int
  description String?
}

model Session {
  id     String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user   User?  @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  userId Int?
}

model Friend {
  user1   User @relation("friend1", fields: [user1Id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user1Id Int
  user2   User @relation("friend2", fields: [user2Id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user2Id Int

  @@id([user1Id, user2Id])
}

model FriendRequest {
  id        Int      @id @default(autoincrement())
  from      User     @relation("requestFrom", fields: [fromId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fromId    Int
  to        User     @relation("requestTo", fields: [toId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  toId      Int
  createdAt DateTime @default(now())

  @@unique([fromId, toId])
}

model UserFyzio {
  id     Int   @id @default(autoincrement())
  user   User? @relation("fyzio")
  age    Int
  height Int
  weight Int
}

model UserGoals {
  id       Int   @id @default(autoincrement())
  user     User? @relation("goals")
  calories Int
  carbs    Int
  fats     Int
  proteins Int
}

model UserSocial {
  id      Int    @id @default(autoincrement())
  user    User?  @relation("social")
  email   String
  bio     String
  picture String?
}

model Image {
  id     String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  folder String
  ext    String
}

model Post {
  id         Int      @id @default(autoincrement())
  creator    User     @relation("post", fields: [creatorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  creatorId  Int
  picture    String
  createdAt  DateTime @default(now())
}

model FoodDiary {
  id        Int @id @default(autoincrement())
  name      String
  grams     Int
  dateEaten String
  user      User @relation("foodDiary", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    Int
}
